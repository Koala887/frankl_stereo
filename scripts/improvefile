#!/bin/bash

#########################################################################
##  frankl (C) 2015-2024
##  
##  USAGE:
##    improvefile <orig> <new>
##  This script generates a (bit-identical) copy of a file <orig> to
##  the file <new>.
##  
#########################################################################

if test -e "$2" ; then
  echo "the file $2 already exists, please delete it first"
  exit
fi


##  This utility is mainly meant for music files (and maybe certain filter and
##  program files for music playback).

##  With these example parameters the output file will be written
##  with 8 MB/sec. These will be written in 1024 loops, that is
##  8 kB per loop. And 32 times per second (after every 32 loops)
##  the written data will be synced to the media containing the file.
##  Before the output of data they will be written 16 times to 
##  a cleared temporary buffer and then back to the cleared original
##  buffer.

bufhrt --interval --file music.flac --outfile=music_better.flac \
       --buffer-size=536870912 --loops-per-second=1024 \
       --bytes-per-second=8290304 --number-copies=16 \
       --dsyncs-per-second=32

##  You may experiment with these parameters. 
##  On a very fast medium higher --dsyncs-per-second may work.
##  Larger values for --number-copies need more time but may result
##  in better sound quality.
##  For best results you should reduce the --bytes-per-second, very good
##  results on some flash cards (CF, SD) were achieved with low values
##  like 131072 - of course this takes a long time.
##  It can be sensible (but is not needed) that the --bytes-per-second 
##  are divisible --loops-per-second and that the number of bytes written 
##  per loop is a multiple of 512 (the usual block size on flash cards, SSDs).
